{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useFetch = url => {\n  _s();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true); // Starts as true\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    let isMounted = true;\n    const fetchData = async () => {\n      setLoading(true); // Ensure loading is true at the start of the fetch\n      try {\n        const response = await fetch(url);\n        if (!response.ok) {\n          throw new Error(`Error: ${response.statusText}`);\n        }\n        const result = await response.json();\n        if (isMounted) {\n          setData(result);\n        }\n      } catch (err) {\n        if (isMounted) {\n          setError(err.message);\n        }\n      } finally {\n        if (isMounted) {\n          setLoading(false); // Ensure loading is false after fetch completes\n        }\n      }\n    };\n    fetchData();\n    return () => {\n      isMounted = false;\n    };\n  }, [url]);\n  return {\n    data,\n    loading,\n    error\n  }; // Expose loading state\n};\n_s(useFetch, \"RiL7vLwmC7ZWXKL/bXt2EIBjBYk=\");\nexport default useFetch;","map":{"version":3,"names":["useState","useEffect","useFetch","url","_s","data","setData","loading","setLoading","error","setError","isMounted","fetchData","response","fetch","ok","Error","statusText","result","json","err","message"],"sources":["/Users/lucatroger/FH/3. Semester/troger_frontend_project/src/useFetch.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useFetch = (url) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true); // Starts as true\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    let isMounted = true;\n\n    const fetchData = async () => {\n      setLoading(true); // Ensure loading is true at the start of the fetch\n      try {\n        const response = await fetch(url);\n        if (!response.ok) {\n          throw new Error(`Error: ${response.statusText}`);\n        }\n        const result = await response.json();\n        if (isMounted) {\n          setData(result);\n        }\n      } catch (err) {\n        if (isMounted) {\n          setError(err.message);\n        }\n      } finally {\n        if (isMounted) {\n          setLoading(false); // Ensure loading is false after fetch completes\n        }\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [url]);\n\n  return { data, loading, error }; // Expose loading state\n};\n\nexport default useFetch;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EAAAC,EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,IAAIU,SAAS,GAAG,IAAI;IAEpB,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5BJ,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;MAClB,IAAI;QACF,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACX,GAAG,CAAC;QACjC,IAAI,CAACU,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,UAAUH,QAAQ,CAACI,UAAU,EAAE,CAAC;QAClD;QACA,MAAMC,MAAM,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QACpC,IAAIR,SAAS,EAAE;UACbL,OAAO,CAACY,MAAM,CAAC;QACjB;MACF,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZ,IAAIT,SAAS,EAAE;UACbD,QAAQ,CAACU,GAAG,CAACC,OAAO,CAAC;QACvB;MACF,CAAC,SAAS;QACR,IAAIV,SAAS,EAAE;UACbH,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QACrB;MACF;IACF,CAAC;IAEDI,SAAS,CAAC,CAAC;IAEX,OAAO,MAAM;MACXD,SAAS,GAAG,KAAK;IACnB,CAAC;EACH,CAAC,EAAE,CAACR,GAAG,CAAC,CAAC;EAET,OAAO;IAAEE,IAAI;IAAEE,OAAO;IAAEE;EAAM,CAAC,CAAC,CAAC;AACnC,CAAC;AAACL,EAAA,CAtCIF,QAAQ;AAwCd,eAAeA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}